#region License
/*
 * Copyright (c) 2023 Stefano Moioli
 * This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
 * Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
 *  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
 *  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
 *  3. This notice may not be removed or altered from any source distribution.
 */
#endregion
ï»¿using Org.BouncyCastle.Utilities.Encoders;
using Yafex.Support;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace Yafex.FileFormats.Lzhs
{
	public unsafe struct LzhsHeader {
		public uint uncompressedSize;
		public uint compressedSize;
		public ushort checksum;
		public fixed byte spare[6];
		
		public static int SIZE => sizeof(LzhsHeader);

		public LzhsHeader(ReadOnlySpan<byte> mem) {
			this = mem.Read<LzhsHeader>(0);
			fixed (byte* dptr = this.spare) {
				if (!new Span<byte>(dptr, 6)
					.ToArray()
					.All(b => b == 0x00)
				) {
					throw new InvalidDataException("Invalid LZHS Header");
				}
			}
		}
	}

	public record HuffmanSymbol(uint code, int length);

	public abstract class HuffmanCacheBase {
		private Dictionary<uint, int> cache = new Dictionary<uint, int>();
		protected abstract uint MakeKey(uint code, int length);

		public void Insert(HuffmanSymbol sym, int idx) {
			var key = MakeKey(sym.code, sym.length);
			cache[key] = idx;
		}

		public bool TryGetValue(HuffmanSymbol sym, out int idx) {
			var key = MakeKey(sym.code, sym.length);
			return cache.TryGetValue(key, out idx);
		}
	}

	public class HuffCharlenCache : HuffmanCacheBase {
		protected override uint MakeKey(uint code, int length) {
			return (uint)(((length & 0xFu) << 13) | (code & 0x1FFFu));
		}
	}

	public class HuffCharposCache : HuffmanCacheBase {
		protected override uint MakeKey(uint code, int length) {
			return (uint)(((length & 0x7u) << 6) | (code & 0x3Fu));
		}
	}

	public record RingBuffer<T>(int size, uint modMask) {
		private List<T> ringBuf = new List<T>();

		public void Fill(T value) {
			ringBuf.Clear();
			ringBuf.AddRange(Enumerable.Repeat(value, size));
		}

		public T this[int idx] {
			get => ringBuf[(int)(idx & modMask)];
			set => ringBuf[(int)(idx & modMask)] = value;
		}
	}

	public record ModCounter(int value, uint modMask) {
		public static ModCounter operator +(ModCounter a, int count) {
			return new ModCounter((int)((a.value + count) & a.modMask), a.modMask);
		}

		public static ModCounter operator -(ModCounter a, int count) => a + (-count);
		public static ModCounter operator ++(ModCounter a) => a + 1;
		public static ModCounter operator --(ModCounter a) => a - 1;
	}

	public enum LzssSequenceType : byte {
		POINTER = 0,
		RAW = 1,
	}

	public class LzhsCache
	{
		public static readonly HuffCharlenCache CharLenCache = new HuffCharlenCache();
		public static readonly HuffCharposCache CharposCache = new HuffCharposCache();
	}

	public class LzhsTables
	{
		public static readonly HuffmanSymbol[] TblCharlen =
			DecodeTable(
				Hex.Decode
			);
		public static readonly HuffmanSymbol[] TblCharpos =
			DecodeTable(
				Hex.Decode("0000000002000000020000000300000006000000040000000E000000050000000F00000005000000100000000500000011000000050000001200000005000000130000000500000014000000050000002A000000060000002B000000060000002C000000060000002D000000060000002E000000060000002F0000000600000030000000060000003100000006000000320000000600000033000000060000003400000006000000350000000600000036000000060000003700000006000000380000000600000039000000060000003A000000060000003B000000060000003C000000060000003D000000060000003E000000060000003F00000006000000")
			);

		private static HuffmanSymbol[] DecodeTable(byte[] data) {
			int numSyms = data.Length / 8;
			HuffmanSymbol[] syms = new HuffmanSymbol[numSyms];

			using (BinaryReader rdr = new BinaryReader(new MemoryStream(data))) {
				for (int i = 0; i < numSyms; i++) {
					uint k = rdr.ReadUInt32();
					int v = rdr.ReadInt32();
					syms[i] = new HuffmanSymbol(k, v);
				}
			}
			return syms;
		}
	}

	public class LzhsDecoder
	{
		public readonly LzhsHeader header;
		private readonly LzhsChecksumPassThru checksum = new LzhsChecksumPassThru();

		private static unsafe LzhsHeader ReadHeader(ReadOnlySpan<byte> data) {
			return data.Slice(0, LzhsHeader.SIZE).ReadStruct<LzhsHeader>();
		}

		private IEnumerable<byte> data;

		public LzhsDecoder(ReadOnlyMemory<byte> data) {
			header = ReadHeader(data.Span);
			this.data = data.ToEnumerable();
		}

		public bool VerifyChecksum() {
			return checksum.Value == header.checksum;
		}

		private uint Pad(uint num, uint align = 16) {
			uint rem = num % align;
			uint pad = rem switch {
				0 => 0,
				_ => 16 - rem
			};
			return num + pad;
		}

		public IEnumerable<byte> AsEnumerable() {
			var huffmanIn = data.Skip(Marshal.SizeOf<LzhsHeader>())
				.Take((int)header.compressedSize);

			var huffmanOut = new HuffmanDecoder(huffmanIn).Decode();
			var lzssOut = new LzssDecoder(huffmanOut).Decode();
			var athumbOut = new ArmThumbConvert(lzssOut).Decode(0);
			var output = athumbOut.Take((int)header.uncompressedSize);
			var final = checksum.Update(output);
			return final;
		}
	}
}
